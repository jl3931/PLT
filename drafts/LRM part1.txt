Language Reference Manual
1.	Introduction
This manual describes the Logo++ language. The manual describes the proposed syntax and semantics of the language. For language tutorial, please refer to the Language Tutorial for Logo++.
2.	Lexical analysis
The Logo++ input is translated and interpreted in several stages. The input is stripped into a stream of tokens and analyzed by a parser.
2.1.	Tokens
There are six classes of tokens: commands, identifiers, keywords, string literals and operators. Blanks, tabs, newlines, and comments (collectively, “white space”) are ignored except as they separate tokens. Some white space is required to separate identifiers, keywords, and constants.
2.2.	Comments
A comment either introduces with a hash character (#) and terminates with another, or starts with two hash characters and ends with a newline character. Comments do not nest, and they do not occur within a string literals.
2.3.	Identifiers
An identifier is a sequence of letters (A-Z | a-z) and digits (0-9). The first character must be a letter. Case is significant. Identifiers is limited to at most 31 characters.
2.4.	Keywords
The following identifiers are used as keywords, and cannot be used otherwise:
Forward	FD	Repeat		Print		ShowTurtle	ST		PenDown
Back		BK	Forever	Speed		HideTurtle	HT		PU
Left		LT	Clearscreen	Teleport	Wrap		CS		PD
Right		RT	Home		GPS		Fence		PenUp		Origin
if		else	while		unless		when		until		for
2.5.	Literals
String Literal is a sequence of characters enclosed by double quotes (“). The backslash is used to introduce character with special meaning, such as newline and the quote character. Strings can be concatenated into a single string.
2.6.	Numeric constants
All numeric constants used in Logo++ are treated as double. There is no other numeric type specification.
2.7.	Operators
The following tokens are operators:
+	-	*	/	^	%
&&	||	&	|	!
>	<	>=	<=	==	!=
3.	Meaning of identifiers
Identifiers refer to the names of functions, commands, or variables. Each identifier refers to the binding of that identifier established in the innermost block. A block is a module or function body. The scope of each identifier is static to the block.
3.1.	Variables
3.2.	Functions
Functions takes zero or more values as input and produce output.
4.	Commands
Commands are the reserved keywords that navigates the Logo++ graphic user interface (GUI).
4.1.	Navigation commands
Navigation commands are the commands followed by one or more numeric constants or variables bound to numeric constants to navigate the movement of the turtle. The four basic navigation commands are:
Forward/FD: Move the turtle forward in distance
Back/BK: Move the turtle backward in distance
Left/LT: Turn the turtle left in angle
Right/RT: Turn the turtle right in angle
4.2.	Non-navigation commands
Non-navigation commands are the commands that navigates the GUI as a whole. The few basic non-navigation commands are:
Clearscreen/CS: Resets the screen
Fence: Blocks the turtle from passing the screen boundary
Wrap: Wraps the screen boundary with the opposite side
5.	Expressions
The precedence of expression operators is the same as the order of the major subsections of this section, highest precedence first. Left- or right- associativity is specified in each subsection for the operators discussed therein.
5.1.	Primary expressions
Primary expressions are variables, numeric constant, string literals, or expressions in parentheses.
Primary-expressions:
Numeric constant
String
(expression)
A numeric constant is a primary expression. It is a double.
A string literal is a primary expression. It is a stream of characters.
A parenthesized expression is an identity to the primary expression inside the parenthesis. The parentheses affects only the precedence of the primary expression.
5.2.	Function call
**Need to be discussed **
5.3.	Power
The power operator ^ is right-associative
Power-expression:
primary-expression ^ power-expression
The operands of ^ must both be numeric types. The binary ^ operator denotes power
5.4.	Unary expressions
The unary operators -, ! are right-associative.
Unary-expressions:
- unary-experession
!unary-expression
The operand of unary - operator must be either a variable bound to a numeric constant or a numeric constant itself. The result is the negation of its operand.
The operand of ! operator must be a Boolean type, a numeric constant, or a variable bound to one of these two. The result is 1 if the value of the operand compares equal to 0, and 0 otherwise.
5.5.	Multiplicative operators
The multiplicative operators *, /, % are left-associative.
Multiplicative-expression:
Multiplicative-expression * unary-expression
Multiplicative-expression / unary-expression
Multiplicative-expression % unary-expression
The operands of * and / must both have numeric types.
The binary * operator denotes multiplication.
The binary / operator denotes the fraction, expression in decimal.
5.6.	Additive operators
The additive operators + and – are left-associative.
Additive-expression:
Multiplicative-expression
Additive-expression + multiplicative-expression
Additive-expression - multiplicative-expression
The operands of + and – must both have numeric types.
The binary + operator denotes addition. (*and maybe concatenation)
The binary – operator denotes subtraction.
